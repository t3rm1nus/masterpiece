import React from 'react';
import { useMusicData } from '../hooks/useMusicData.js';
import { Typography, Box, Card, CardContent, Chip, CircularProgress, Alert } from '@mui/material';

// =============================================
// MusicChunkedExample: Ejemplo de uso de datos chunked de m√∫sica
// Demuestra carga eficiente, filtrado y visualizaci√≥n optimizada para performance y m√≥viles.
// =============================================

const MusicChunkedExample: React.FC = () => {
  const { musicData, loading, error, metadata, filter } = useMusicData();

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress />
        <Typography variant="body1" sx={{ ml: 2 }}>
          Cargando datos de m√∫sica chunked...
        </Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error">
        Error cargando datos de m√∫sica: {error}
      </Alert>
    );
  }

  const rockMusic = filter.bySubcategory('rock');
  const electronicMusic = filter.bySubcategory('electronic');
  const masterpieces = filter.byMasterpiece(true);
  const randomPicks = filter.random(5);

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        üéµ Datos de M√∫sica Chunked
      </Typography>
      
      {/* Metadata */}
      <Card sx={{ mb: 3, bgcolor: 'primary.main', color: 'primary.contrastText' }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üìä Estad√≠sticas de Carga
          </Typography>
          <Box display="flex" gap={2} flexWrap="wrap">
            <Chip 
              label={`Total: ${metadata?.totalItems || 0} elementos`} 
              color="secondary"
            />
            <Chip 
              label={`Chunks: ${metadata?.totalChunks || 0}`} 
              color="secondary"
            />
            <Chip 
              label={`Cargado: ${new Date(metadata?.loadedAt || Date.now()).toLocaleTimeString()}`} 
              color="secondary"
            />
          </Box>
        </CardContent>
      </Card>

      {/* Estad√≠sticas por subcategor√≠a */}
      <Box display="flex" gap={2} mb={3} flexWrap="wrap">
        <Card sx={{ minWidth: 200 }}>
          <CardContent>
            <Typography variant="h6" color="text.secondary">
              üé∏ Rock
            </Typography>
            <Typography variant="h4">
              {rockMusic.length}
            </Typography>
          </CardContent>
        </Card>

        <Card sx={{ minWidth: 200 }}>
          <CardContent>
            <Typography variant="h6" color="text.secondary">
              üéõÔ∏è Electronic
            </Typography>
            <Typography variant="h4">
              {electronicMusic.length}
            </Typography>
          </CardContent>
        </Card>

        <Card sx={{ minWidth: 200 }}>
          <CardContent>
            <Typography variant="h6" color="text.secondary">
              ‚≠ê Masterpieces
            </Typography>
            <Typography variant="h4">
              {masterpieces.length}
            </Typography>
          </CardContent>
        </Card>
      </Box>

      {/* Selecci√≥n aleatoria */}
      <Typography variant="h5" gutterBottom>
        üé≤ Selecci√≥n Aleatoria (5 elementos)
      </Typography>
      <Box display="flex" gap={2} flexWrap="wrap" mb={3}>
        {randomPicks.map((item: any) => (
          <Card key={item.id} sx={{ maxWidth: 300 }}>
            <CardContent>
              <Typography variant="h6" component="div">
                {item.title?.es || item.title?.en || 'Sin t√≠tulo'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {item.artist}
              </Typography>
              <Box mt={1}>
                <Chip 
                  size="small" 
                  label={item.subcategory} 
                  color="primary"
                />
                {item.masterpiece && (
                  <Chip 
                    size="small" 
                    label="‚≠ê Masterpiece" 
                    color="secondary"
                    sx={{ ml: 1 }}
                  />
                )}
              </Box>
            </CardContent>
          </Card>
        ))}
      </Box>

      {/* Informaci√≥n t√©cnica */}
      <Card sx={{ mt: 3, bgcolor: 'grey.100' }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            üîß Informaci√≥n T√©cnica del Sistema Chunked
          </Typography>
          <Typography variant="body2" paragraph>
            ‚úÖ Los datos se cargan desde {metadata?.totalChunks} chunks separados de ~200 elementos cada uno
          </Typography>
          <Typography variant="body2" paragraph>
            ‚úÖ Mejora el rendimiento inicial de carga
          </Typography>
          <Typography variant="body2" paragraph>
            ‚úÖ Permite escalabilidad cuando el archivo crezca
          </Typography>
          <Typography variant="body2" paragraph>
            ‚úÖ Incluye fallback autom√°tico al archivo original
          </Typography>
        </CardContent>
      </Card>
    </Box>
  );
};

export default MusicChunkedExample;